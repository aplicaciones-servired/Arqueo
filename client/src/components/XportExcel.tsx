import * as XLSX from 'xlsx'
import type { Arqueo } from '../types/arqueo'

// eslint-disable-next-line react/prop-types
export const BottonExportItems = ({ datos }: { datos: Arqueo }): JSX.Element => {
  const titulo = [{ A: 'Reporte de arqueo' }, {}]
  const hora = new Date()
  const infoCreacción = { A: `Fecha De Creación ${hora.toLocaleString()}` }
  const longitudes = [25, 25, 20, 10, 10, 10, 35]

  const handleDownload = (): void => {
    const tabla = [
      {
        A: 'supervisor',
        B: 'nombres',
        C: 'nombre supervisor',
        D: 'documento',
        E: 'ip',
        F: 'sucursal',
        G: 'puntodeventa',
        H: 'ventabruta',
        I: 'baseefectivo',
        J: 'totalingreso',
        K: 'chancesabonados',
        L: 'chancespreimpresos',
        M: 'premiospagados',
        N: 'efectivocajafuerte',
        O: 'totalegresos',
        P: 'totalbilletes',
        Q: 'totalmonedas',
        R: 'totalarqueo',
        S: 'sobrantefaltante',
        T: 'totalbilletescaja',
        U: 'totalmonedascaja',
        V: 'totalpremioscaja',
        BS: 'total',
        BZ: 'rollos_bnet',
        CA: 'rollos_fisicos',
        CB: 'diferencia',
        CC: 'nombre_juego',
        CD: 'cantidad_bnet',
        CE: 'cantidad_fisicos',
        CF: 'cantidad_faltante',
        CG: 'cantidad_tiquete',
        CH: 'descargado',
        CI: 'nombre_juego2',
        CJ: 'cantidad_bnet2',
        CK: 'cantidad_fisicos2',
        CL: 'cantidad_faltante2',
        CM: 'cantidad_tiquete2',
        CN: 'descargado2',
        CO: 'nombre_juego3',
        CP: 'cantidad_bnet3',
        CQ: 'cantidad_fisicos3',
        CR: 'cantidad_faltante3',
        CS: 'cantidad_tiquete3',
        CT: 'descargado3',
        CU: 'nombre_juego4',
        CV: 'cantidad_bnet4',
        CW: 'cantidad_fisicos4',
        CX: 'cantidad_faltante4',
        CY: 'cantidad_tiquete4',
        CZ: 'descargado4',
        DA: 'nombre_juego5',
        DB: 'cantidad_bnet5',
        DC: 'cantidad_fisicos5',
        DD: 'cantidad_faltante5',
        DE: 'cantidad_tiquete5',
        DF: 'descargado5',
        DG: 'nombre_juego6',
        DH: 'cantidad_bnet6',
        DI: 'cantidad_fisicos6',
        DJ: 'cantidad_faltante6',
        DK: 'cantidad_tiquete6',
        DL: 'descargado6',
        DM: 'nombre_juego7',
        DN: 'cantidad_bnet7',
        DO: 'cantidad_fisicos7',
        DP: 'cantidad_faltante7',
        DQ: 'cantidad_tiquete7',
        DR: 'descargado7',
        DS: 'totaldescargados',
        DT: 'totalvalor',
        DU: 'requisito1',
        DV: 'observacion1',
        DW: 'requisito2',
        DX: 'observacion2',
        DY: 'requisito3',
        DZ: 'observacion3',
        EA: 'requisito4',
        EB: 'observacion4',
        EC: 'requisito5',
        ED: 'observacion5',
        EE: 'requisito6',
        EF: 'observacion6',
        EG: 'requisito7',
        EH: 'observacion7',
        EI: 'requisito8',
        EJ: 'observacion8',
        EK: 'requisito9',
        EL: 'observacion9',
        EM: 'requisito10',
        EN: 'observacion10',
        EO: 'requisito11',
        EP: 'observacion11',
        EQ: 'requisito12',
        ER: 'observacion12',
        ES: 'requisito13',
        ET: 'observacion13',
        EU: 'requisito14',
        EV: 'observacion14',
        EW: 'requisito15',
        EX: 'observacion15',
        EY: 'requisito16',
        EZ: 'observacion16',
        FA: 'requisito17',
        FB: 'observacion17',
        FC: 'requisito18',
        FD: 'observacion18',
        FE: 'requisito19',
        FF: 'observacion19',
        FG: 'requisito20',
        FH: 'observacion20',
        FI: 'requisito21',
        FJ: 'observacion21',
        FK: 'requisito22',
        FL: 'observacion22',
        FM: 'requisito23',
        FN: 'observacion23',
        FO: 'requisito24',
        FP: 'observacion24',
        FQ: 'requisito25',
        FR: 'observacion25',
        FS: 'requisito26',
        FT: 'observacion26',
        FU: 'requisito27',
        FV: 'observacion27',
        FW: 'requisito28',
        FX: 'observacion28',
        FY: 'requisito29',
        FZ: 'observacion29',
        GA: 'requisito30',
        GB: 'observacion30',
        GC: 'requisito31',
        GD: 'observacion31',
        GE: 'requisito32',
        GF: 'observacion32',
        GG: 'requisito33',
        GH: 'observacion33',
        GI: 'requisito34',
        GJ: 'observacion34',
        GK: 'requisito35',
        GL: 'observacion35',
        GM: 'fechavisita',
        GN: 'horavisita',
        GO: 'latitud',
        GP: 'longitud'
      }
    ]

    // eslint-disable-next-line react/prop-types
    tabla.push({
      A: datos.supervisor,
      B: datos.nombres,
      C: datos.nombre_supervisor?.toString(),
      D: datos.documento?.toString(),
      E: datos.ip?.toString(),
      F: datos.sucursal?.toString(),
      G: datos.puntodeventa?.toString(),
      H: datos.ventabruta?.toString(),
      I: datos.baseefectivo?.toString(),
      J: datos.totalingreso?.toString(),
      K: datos.chancesabonados?.toString(),
      L: datos.chancespreimpresos?.toString(),
      M: datos.premiospagados?.toString(),
      N: datos.efectivocajafuerte?.toString(),
      O: datos.totalegresos?.toString(),
      P: datos.totalbilletes?.toString(),
      Q: datos.totalmonedas?.toString(),
      R: datos.totalarqueo?.toString(),
      S: datos.sobrantefaltante?.toString(),
      T: datos.totalbilletescaja?.toString(),
      U: datos.totalmonedascaja?.toString(),
      V: datos.totalpremioscaja?.toString(),
      BS: datos.total?.toString(),
      BZ: datos.rollos_bnet?.toString(),
      CA: datos.rollos_fisicos?.toString(),
      CB: datos.diferencia?.toString(),
      CC: datos.nombre_juego?.toString(),
      CD: datos.cantidad_bnet?.toString(),
      CE: datos.cantidad_fisicos?.toString(),
      CF: datos.cantidad_faltante?.toString(),
      CG: datos.cantidad_tiquete?.toString(),
      CH: datos.descargado?.toString(),
      CI: datos.nombre_juego2?.toString(),
      CJ: datos.cantidad_bnet2?.toString(),
      CK: datos.cantidad_fisicos2?.toString(),
      CL: datos.cantidad_faltante2?.toString(),
      CM: datos.cantidad_tiquete2?.toString(),
      CN: datos.descargado2?.toString(),
      CO: datos.nombre_juego3?.toString(),
      CP: datos.cantidad_bnet3?.toString(),
      CQ: datos.cantidad_fisicos3?.toString(),
      CR: datos.cantidad_faltante3?.toString(),
      CS: datos.cantidad_tiquete3?.toString(),
      CT: datos.descargado3?.toString(),
      CU: datos.nombre_juego4?.toString(),
      CV: datos.cantidad_bnet4?.toString(),
      CW: datos.cantidad_fisicos4?.toString(),
      CX: datos.cantidad_faltante4?.toString(),
      CY: datos.cantidad_tiquete4?.toString(),
      CZ: datos.descargado4?.toString(),
      DA: datos.nombre_juego5?.toString(),
      DB: datos.cantidad_bnet5?.toString(),
      DC: datos.cantidad_fisicos5?.toString(),
      DD: datos.cantidad_faltante5?.toString(),
      DE: datos.cantidad_tiquete5?.toString(),
      DF: datos.descargado5?.toString(),
      DG: datos.nombre_juego6?.toString(),
      DH: datos.cantidad_bnet6?.toString(),
      DI: datos.cantidad_fisicos6?.toString(),
      DJ: datos.cantidad_faltante6?.toString(),
      DK: datos.cantidad_tiquete6?.toString(),
      DL: datos.descargado6?.toString(),
      DM: datos.nombre_juego7?.toString(),
      DN: datos.cantidad_bnet7?.toString(),
      DO: datos.cantidad_fisicos7?.toString(),
      DP: datos.cantidad_faltante7?.toString(),
      DQ: datos.cantidad_tiquete7?.toString(),
      DR: datos.descargado7?.toString(),
      DS: datos.totaldescargados?.toString(),
      DT: datos.totalvalor?.toString(),
      DU: datos.requisito1?.toString(),
      DV: datos.observacion1,
      DW: datos.requisito2,
      DX: datos.observacion2,
      DY: datos.requisito3,
      DZ: datos.observacion3,
      EA: datos.requisito4,
      EB: datos.observacion4,
      EC: datos.requisito5,
      ED: datos.observacion5,
      EE: datos.requisito6,
      EF: datos.observacion6,
      EG: datos.requisito7,
      EH: datos.observacion7,
      EI: datos.requisito8,
      EJ: datos.observacion8,
      EK: datos.requisito9,
      EL: datos.observacion9,
      EM: datos.requisito10,
      EN: datos.observacion10,
      EO: datos.requisito11,
      EP: datos.observacion11,
      EQ: datos.requisito12,
      ER: datos.observacion12,
      ES: datos.requisito13,
      ET: datos.observacion13,
      EU: datos.requisito14,
      EV: datos.observacion14,
      EW: datos.requisito15,
      EX: datos.observacion15,
      EY: datos.requisito16,
      EZ: datos.observacion16,
      FA: datos.requisito17,
      FB: datos.observacion17,
      FC: datos.requisito18,
      FD: datos.observacion18,
      FE: datos.requisito19,
      FF: datos.observacion19,
      FG: datos.requisito20,
      FH: datos.observacion20,
      FI: datos.requisito21,
      FJ: datos.observacion21,
      FK: datos.requisito22,
      FL: datos.observacion22,
      FM: datos.requisito23,
      FN: datos.observacion23,
      FO: datos.requisito24,
      FP: datos.observacion24,
      FQ: datos.requisito25,
      FR: datos.observacion25,
      FS: datos.requisito26,
      FT: datos.observacion26,
      FU: datos.requisito27,
      FV: datos.observacion27,
      FW: datos.requisito28,
      FX: datos.observacion28,
      FY: datos.requisito29,
      FZ: datos.observacion29,
      GA: datos.requisito30,
      GB: datos.observacion30,
      GC: datos.requisito31,
      GD: datos.observacion31,
      GE: datos.requisito32,
      GF: datos.observacion32,
      GG: datos.requisito33,
      GH: datos.observacion33,
      GI: datos.requisito34,
      GJ: datos.observacion34,
      GK: datos.requisito35,
      GL: datos.observacion35,
      GM: datos.fechavisita,
      GN: datos.horavisita,
      GO: datos.latitud,
      GP: datos.longitud
    })

    const dataFinal = [...titulo, infoCreacción, ...tabla]

    setTimeout(() => {
      creandoArchivo(dataFinal)
    }, 1000)
  }

  const creandoArchivo = (dataFinal: unknown[]): void => {
    const libro = XLSX.utils.book_new()
    const hoja = XLSX.utils.json_to_sheet(dataFinal, { skipHeader: true })

    hoja['!merges'] = [
      XLSX.utils.decode_range('A1:G1'),
      XLSX.utils.decode_range('A2:G2'),
      XLSX.utils.decode_range('A3:G3')
    ]

    const simpiedades: XLSX.ColInfo[] | Array<{ width: number }> | undefined = []

    longitudes.forEach((col) => {
      simpiedades.push({ width: col })
    })

    hoja['!cols'] = simpiedades
    XLSX.utils.book_append_sheet(libro, hoja, 'Items')
    XLSX.writeFile(libro, 'ARQUEO.xlsx')
  }

  return (

    <button
      type="button"
      onClick={handleDownload}
      className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg "
    >
      Exportar a Excel
    </button>

  )
}
